<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.spring.dct.user.mapper.IUserMapper">

	<resultMap type="com.spring.dct.vo.UsersVO" id="userInfo">
		<id property="userNo" column="USER_NO" />
		<result property="adminId" column="ADMIN_ID" />
		<result property="userId" column="USER_ID" />
		<result property="userPw" column="USER_PW"/>
		<result property="userName" column="USER_NAME"/>
		<result property="userPhone" column="USER_PHONE"/>
		<result property="userEmail" column="USER_EMAIL"/>
		<result property="userZipcode" column="USER_ZIPCODE"/>
		<result property="userAddress" column="USER_ADDRESS"/>
		<result property="userAddressDetails" column="USER_ADDRESS_DETAILS"/>
		<result property="userEmailReceivedStatus" column="USER_EMAIL_RECEIVED_STATUS"/>
		<result property="sessionId" column="SESSION_ID"/>
		<result property="limitTime" column="LIMIT_TIME"/>
	</resultMap>

	<!-- 아이디 중복 확인 -->
	<!-- int idCheck(String id); -->
	<select id="idCheck" resultType="int">
		SELECT COUNT(*) FROM USERS
		WHERE USER_ID = #{id}
	</select>
	
	<!-- 회원 가입 -->
	<!-- void join(UserVO user); -->
	<insert id="join">
		INSERT INTO USERS(
		USER_NO, USER_ID, USER_PW, USER_NAME, USER_PHONE, USER_EMAIL, USER_ZIPCODE, USER_ADDRESS, USER_ADDRESS_DETAILS
		)
		VALUES(
		user_no_SEQ.NEXTVAL, #{userId}, #{userPw}, #{userName}, #{userPhone}, #{userEmail}, #{userZipcode}, #{userAddress}, #{userAddressDetails}
		)
	</insert>
	
	<select id="getInfo" resultMap="userInfo"> 
		SELECT * FROM USERS
		WHERE USER_ID = #{id} 
	</select>
	
	<!-- 로그인 -->
	<!-- UserVO login(@Param("userId") String userId, @Param("userPw") String userPw); -->
	<select id="login" resultMap="userInfo"> 
		SELECT * FROM USERS
		WHERE USER_ID = #{id} 
		AND USER_PW = #{pw}
	</select>
	
	<!-- 회원 정보 수정 -->
	<!-- void updateUser(UsersVO vo); -->
	<update id="updateUser">
		UPDATE USERS
		SET 
			USER_PW = #{userPw},
			USER_PHONE = #{userPhone, jdbcType=VARCHAR},
			USER_EMAIL = #{userEmail, jdbcType=VARCHAR},
			USER_ZIPCODE = #{userZipcode, jdbcType=VARCHAR},
			USER_ADDRESS = #{userAddress, jdbcType=VARCHAR},
			USER_ADDRESS_DETAILS = #{userAddressDetails, jdbcType=VARCHAR}
		WHERE 
			USER_ID = #{userId}
	</update>
	
	<!-- 회원 정보 삭제 -->
	<!-- void deleteUser(@Param("userId") String id, @Param("userPw") String userPw); -->
	<delete id="deleteUser">
		DELETE FROM USERS
		WHERE USER_ID = #{userId} 
	</delete>

	<!-- 자동 로그인을 체크한 경우 쿠키값(세션 아이디)과 유효시간을 갱신 -->	
	<update id="keepLogin">
		UPDATE USERS
		SET session_id = #{sessionId},
			limit_time = #{limitDate}
		WHERE USER_ID = #{id} 
	</update>
	
	<!-- 자동 로그인을 신청한 회원이 사이트 재방문 시 로컬에 저장된 쿠키값(세션ID)과 일치하는 회원의 모든 정보를 조회 -->
	<select id="getUserWithSessionId" resultMap="userInfo">
		SELECT * FROM USERS
		WHERE session_id = #{sessionId}
	</select>

</mapper>